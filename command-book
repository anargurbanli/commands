---pvc volume expand(heketi)---
1 kubectl -n ecbar get pvc - pvc sayi oyrenilir
2 kubectl -n ecbar describe pv <pvc-name> - pv melumatlarindan volume adi goturulur
3 heketi-cli volume list - volume adi teyin edilir ve volume id deqiqlesdirilir
4 heketi-cli volume expand --expand-size=2 --volume=beaa53cbc5b88b15b509153b0b6afedb --> volume-un hecmi +2gb artirilir
5 heketi-cli device resync beaa53cbc5b88b15b509153b0b6afedb --> volume size resync edilir
-------------------------------------------------------------------------------------------------------------
---iperf check network bandwith---
$ yum install iperf3
$ iperf3 -i 5 -s  - on server listen as server in 5 second periods
$ iperf3 -i 5 -t 60 -c <server hostname or ip address> - on client
---Configure rsyslog securely---
$ openssl genrsa 2048 > ca-key.pem - generate ca key
$ openssl req -new -x509 -nodes -days 3600 -key ca-key.pem -out ca-cert.pem - create ca certificate from key
$ scp -P 53123 ca-* cl* username@syslog-client:~ - copy CA key to syslog-server
$ scp -P 53123 ca-* cl* username@syslog-server:~ - copy CA key to syslog-client
--syslog-server configuration---
$ openssl req -newkey rsa:2048 -days 3600 -nodes -keyout server-key.pem -out server-req.pem
$ openssl rsa -in server-key.pem -out server-key.pem
$ openssl x509 -req -in server-req.pem -days 3600 -CA ca-cert.pem -CAkey ca-key.pem -set_serial 01 -out server-cert.pem
--add to rsyslog.conf---
$DefaultNetstreamDriver gtls
$DefaultNetstreamDriverCAFile /etc/pki/tls/certs/ca-cert.pem
$DefaultNetstreamDriverCertFile /etc/pki/tls/certs/server-cert.pem
$DefaultNetstreamDriverKeyFile /etc/pki/tls/private/server-key.pem
$ModLoad imtcp
$InputTCPServerStreamDriverMode 1
$InputTCPServerStreamDriverAuthMode x509/name
$InputTCPServerStreamDriverPermittedPeer rsys-client.domain.az
$InputTCPServerRun 6514

#### GLOBAL DIRECTIVES ####
$template RemoteLogs,"/archive/%$YEAR%-%$MONTH%-%$DAY%/%HOSTNAME%-%FROMHOST-IP%/%PROGRAMNAME%.log"
*.* ?RemoteLogs
& stop
---logrotate-syslog---
/var/log/cron
/var/log/maillog
/var/log/messages
/var/log/secure
/var/log/spooler
{
    su root root
    daily
    missingok
    sharedscripts
    rotate 1
    postrotate
        /bin/bash /etc/init.d/rotate.sh
        /bin/kill -HUP `cat /var/run/syslogd.pid 2> /dev/null` 2> /dev/null || true
    endscript
}
---rotate.sh---
#!/bin/bash

newdir=/archive/`date +%d%m%Y`

mkdir $newdir
cp /var/log/messages $newdir
cp /var/log/cron $newdir
cp /var/log/maillog $newdir
cp /var/log/secure $newdir
cp /var/log/spooler $newdir
cp /var/log/.session/session* $newdir

find /var/log/ -name "messages-*" -type f -exec rm -rf {} \;
find /var/log/ -name "cron-*" -type f -exec rm -rf {} \;
find /var/log/ -name "maillog-*" -type f -exec rm -rf {} \;
find /var/log/ -name "secure-*" -type f -exec rm -rf {} \;
find /var/log/ -name "spooler-*" -type f -exec rm -rf {} \;
find /var/log/.session/ -name "session.*" -type f -exec rm -rf {} \;
------------------------------------------------------------------
$ mv server-cert.pem ca-cert.pem /etc/pki/tls/certs/
$ mv server-key.pem ca-key.pem /etc/pki/tls/private/
$ restorecon -RvF /etc/pki/tls/certs/{ca-cert.pem,server-cert.pem}
$ restorecon -RvF /etc/pki/tls/private/{ca-key.pem,server-key.pem}
$ firewall-cmd --add-port=6514/tcp --permanent
$ firewall-cmd --reload
$ systemctl restart rsyslog
--syslog-client configuration---
$ yum install rsyslog rsyslog-gnutls
$ openssl req -newkey rsa:2048 -days 3600 -nodes -keyout client-key.pem -out client-req.pem
$ openssl rsa -in client-key.pem -out client-key.pem
$ openssl x509 -req -in client-req.pem -days 3600 -CA ca-cert.pem -CAkey ca-key.pem -set_serial 01 -out client-cert.pem

--add to rsyslog.conf---
$DefaultNetstreamDriver gtls
$DefaultNetstreamDriverCAFile /etc/pki/tls/certs/ca-cert.pem
$DefaultNetstreamDriverCertFile /etc/pki/tls/certs/client-cert.pem
$DefaultNetstreamDriverKeyFile /etc/pki/tls/private/client-key.pem
$ActionSendStreamDriverMode 1 
$ActionSendStreamDriverAuthMode x509/name
$ActionSendStreamDriverPermittedPeer rsys-server.domain.az
*.* @@bksrelkvp.domain.az:6514
------------------------------------------------------------------
$ mv client-cert.pem ca-cert.pem /etc/pki/tls/certs/
$ mv client-key.pem ca-key.pem /etc/pki/tls/private/
$ restorecon -RvF /etc/pki/tls/certs/{ca-cert.pem,client-cert.pem}
$ restorecon -RvF /etc/pki/tls/private/{ca-key.pem,client-key.pem}
$ systemctl restart rsyslog
---kube home config---
$ mkdir -p $HOME/.kube
$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
$ sudo chown $(id -u):$(id -g) $HOME/.kube/config

---git---
$ git clone https://url-address
$ git add .
$ git commit -m "your comment there"
$ git push
---extend disk with root path---
$ yum -y install cloud-utils-growpart
$ growpart -h
$ growpart /dev/sda 2
$ pvresize /dev/sda2
$ lvextend -l +100%FREE /dev/name-of-volume-group/root
$ lvextend -l +1G /dev/name-of-volume-group/root
$ resize2fs /dev/name-of-volume-group/root
$ xfs_growfs /
---install GUI---
$ yum groupinstall "Server with GUI"
$ systemctl set-default graphical.target
$ systemctl start graphical.target
$ systemctl reboot
---selinux---
$ ausearch -m AVC,USER_AVC,SELINUX_ERR -ts today - find selinux errors
$ ausearch -m AVC,USER_AVC,SELINUX_ERR,USER_SELINUX_ERR -ts recent
$ journalctl -t setroubleshoot
$ sealert -l [message_ID]
$ ausearch -c 'pidof' --raw | audit2allow -M my-pidof
$ semodule -i my-pidof.pp
$ ausearch -m AVC,USER_AVC,SELINUX_ERR,USER_SELINUX_ERR -ts recent
$ journalctl -t setroubleshoot
$ dmesg | grep -i -e type=1300 -e type=1400
$ semodule -DB
$ semodule -B
$ setenforce 0
$ sealert -l "*"
$ auditctl -w /etc/shadow -p w -k shadow-write - Clear the setroubleshoot cache:
$ rm -f /var/lib/setroubleshoot/setroubleshoot.xml - Reproduce the problem.
$ semanage fcontext -a -t httpd_sys_content_t "/srv/myweb(/.*)?" -command adds the context for the /srv/myweb/ directory and all files
$ restorecon -R -v /srv/myweb - Incorrect context
$ matchpathcon -V /var/www/html/* - The matchpathcon utility checks the context of a file path and compares it to the default label for that path
$ restorecon -v /var/www/html/index.html - restorecon reset /var/www/html/index.html context unconfined_u:object_r:user_home_t:s0->system_u:object_r:httpd_sys_content_t:s0
$ restorecon -R -v /var/www/html/ - To restore the context for all files under a directory, use the -R option:
$ setsebool -P httpd_can_network_connect_db on - Apache HTTP Server to communicate with MariaDB
$ getsebool -a | grep ftp
$ semanage port -l | grep http
$ semanage port -a -t http_port_t -p tcp 9876 - The -a option adds a new record; the -t option defines a type; and the -p option defines a protocol
---haproxy-key---
openssl pkcs12 -in domain.pfx -out domain_nokey.pem -nokeys
openssl pkcs12 -in domain.pfx -out domain_withkey.pem
openssl rsa -in domain_withkey.pem -out domain.key
cat domain_nokey.pem domain.key > my.pem
---subscription---
$ subscription-manager register --org="Central_Bank_of_Azerbaijan_Republic" --activationkey="domain_key"
$ subscription-manager attach --auto
$ subscription-manager unregister
$ subscription-manager remove --all
$ subscription-manager clean
---realmd---
$ yum install sssd realmd oddjob oddjob-mkhomedir adcli samba-common samba-common-tools krb5-workstation openldap-clients policycoreutils-python -y
$ realm join --user=anar_gurbanli domain.az
$ realm list
$ sed -i 's/use_fully_qualified_names = True/use_fully_qualified_names = False/g' /etc/sssd/sssd.conf
$ sed -i 's/%u@%d/%u/g' /etc/sssd/sssd.conf
$ systemctl restart sssd && systemctl enable sssd
$ echo "%linux        ALL=(ALL)       ALL" >> /etc/sudoers
$ echo "anar_gurbanli        ALL=(ALL)       ALL" >> /etc/sudoers 

$ realm permit --all
$ realm permit user@example.com
$ realm permit -x user@example.com
$ realm deny --all
$ realm permit -g linux@domain.az
$ realm leave example.com
---winbind---
$ yum install samba-client  samba-winbind samba-winbind-clients
$ vim /etc/samba/smb.conf
[global]
workgroup = DOMAIN
realm = DOMAIN.LOCAL
security = ads
idmap config * : backend = autorid
idmap config * : range = 100000-19999999
idmap config * : rangesize = 1000000
template homedir = /home/%D/%U
template shell = /bin/bash
winbind use default domain = false
winbind offline logon = true
log file = /var/log/samba/log.%m
max log size = 50
log level = 0 
$ net ads join -U Administrator
$ yum install bind-utils
$ dig srv _ldap._tcp.dc._msdcs.domain.name
$ service winbind start
$ chkconfig winbind on
$ wbinfo -t
$ wbinfo -u
$ wbinfo -g
$ authconfig-tui
select Use Winbind for User Information section and select Use Shadow Passwords, 
Use Winbind Authentication, and Local authorization is sufficient in the Authentication section. 
Select Next and on the following screen select OK.

$vim /etc/security/pam_winbind.conf
;require_membership_of = groupname

$ authconfig --enablewinbind --enablewinbindauth  --enablemkhomedir --update

$ vim /etc/nsswitch.conf
passwd:     files winbind
group:      files winbind

$ getent passwd DOMAIN\aduser

$ vim /etc/sudoersd/groupname
% domain\\groupname        ALL=(ALL)       ALL
domain\anar_gurbanli      ALL=(ALL)       ALL
---session---
$ mkdir /var/log/.session && chmod -R 733 /var/log/.session
add the following lines to /etc/profile
---pass-expire-sh---
for i in root
do
# convert current date to seconds
currentdate=`date +%s`
# find expiration date of user
userexp=`chage -l $i | grep 'Password expires' | cut -d: -f2`
# convert expiration date to seconds
passexp=`date -d "$userexp" +%s`
# find the remaining days for expiry
exp=`expr \( $passexp - $currentdate \)`
# convert remaining days from sec to days
expday=`expr \( $exp / 86400 \)`
#if [ $expday -le 10 ]; then
echo $expday > /etc/init.d/root-expire
#fi
done
---sms-gateway---
wget -O - "http://api.msm.az/sendsms?user=domainapi&password=GTs3MFwQ&gsm=994552522000&from=BSXM&text=salam"
---Record terminal sessions---
if [ "x$SESSION_RECORD" = "x" ]
then
timestamp=`date "+%d%m%Y%H%M"`
output=/var/log/.session/session.$USER.$timestamp
SESSION_RECORD=started
export SESSION_RECORD
script -t -f -q 2> /dev/null $output
exit
fi
---session logrotate---
/var/log/.session/session.* {
        su root root
        daily
        notifempty
        missingok
        rotate 1
        maxage 7
        dateformat +
        $dateformat -%d-%m-%Y
        create 0644 root root
postrotate
        /usr/bin/find /var/log/.session/ -name "session.*" -type f -size 0M -exec rm {} \;
endscript
}
---session2---
add the following lines to /etc/profile

userinfo=$(echo with $(whoami)" from: "$(who am i | awk '{print $5}'))
PROMPT_COMMAND='RETRN_VAL=$?;logger -p local3.debug "$userinfo [$$]: $(HISTTIMEFORMAT="";history 1 | sed "s/^[ ]*[0-9]\+[ ]*//" ) [result:$RETRN_VAL]"'
export PROMPT_COMMAND
add the following lines to /etc/rsyslog.conf
local3.*	/var/log/.session/session.log
---openscap---
$ yum install openscap-scanner - install openscap scanner
$ yum install scap-security-guide - install scurity-guide
$ oscap oval eval --results scan-oval-results.xml /usr/share/xml/scap/ssg/content/ssg-centos7-ds.xml - generate oval scan
$ oscap oval generate report scan-oval-results.xml > ssg-scan-oval-report.html - generate reports to html
$  oscap xccdf eval --results xccdf-results.xml --profile xccdf_org.ssgproject.content_profile_pci-dss /usr/share/xml/scap/ssg/content/ssg-rhel7-ds.xml - scan xccdf for pci-dss compliance for rhel
$ oscap xccdf eval --results scan-results.xml --profile xccdf_org.ssgproject.content_profile_pci-dss /usr/share/xml/scap/ssg/content/ssg-centos7-ds.xml - scan xccdf for pci-dss compliance for centos
$ oscap xccdf generate report --output scan-report.html scan-results.xml - export xccdf pci-dss scan results to html
$ oscap info scan-results.xml | grep "Result ID" - check result id
$ oscap xccdf generate fix --fix-type ansible --result-id "" --output playbook-scan-result.yml scan-results.xml - generate ansible playbook based on results of scan
 /usr/share/scap-security-guide/ansible/ directory
$ oscap-ssh joesec@machine1 22 xccdf eval --report remote_report.html --profile ospp /usr/share/xml/scap/ssg/content/ssg-rhel7-ds.xml
$ oscap-ssh root@bksrdomaindbvp2 53123 xccdf eval --report remote_report.html --profile xccdf_org.ssgproject.content_profile_pci-dss /usr/share/xml/scap/ssg/content/ssg-rhel7-ds.xml
$ oscap xccdf eval --remediate --profile C2S --results results.xml --report report.html /usr/share/xml/scap/ssg/content/ssg-rhel7-xccdf.xml - scan cis for rhel7
---kubernetes-calico-change-pod-network-cidr---
$ kubectl apply -f https://docs.projectcalico.org/manifests/calicoctl.yaml
$ alias calicoctl="kubectl exec -i -n kube-system calicoctl -- /calicoctl "
$ calicoctl create -f -<<EOF
apiVersion: projectcalico.org/v3
kind: IPPool
metadata:
  name: net-pool
spec:
  cidr: 10.253.0.0/16
  ipipMode: Always
  natOutgoing: true
EOF
$ calicoctl get ippool -o wide
$ calicoctl get ippool -o yaml > pool.yaml
$ cat pool.yaml 
apiVersion: projectcalico.org/v3
items:
- apiVersion: projectcalico.org/v3
  kind: IPPool
  metadata:
    creationTimestamp: "2021-01-25T18:05:56Z"
    name: default-ipv4-ippool
    resourceVersion: "6166259"
    uid: 3c854d2b-330c-4b3d-b94c-79bf03ce77fb
  spec:
    blockSize: 26
    cidr: 172.16.0.0/16
    ipipMode: Always
    natOutgoing: true
    nodeSelector: all()
    vxlanMode: Never
- apiVersion: projectcalico.org/v3
  kind: IPPool
  metadata:
    creationTimestamp: "2021-02-22T10:50:41Z"
    name: net-pool
    resourceVersion: "6168466"
    uid: f2a62d57-66d4-486e-bfbb-5e8cd8f73914
  spec:
    blockSize: 26
    cidr: 172.17.0.0/16
    ipipMode: Always
    natOutgoing: true
    nodeSelector: all()
    vxlanMode: Never
kind: IPPoolList
metadata:
  resourceVersion: "6168599"


$ calicoctl apply -f -<<EOF
apiVersion: projectcalico.org/v3
items:
- apiVersion: projectcalico.org/v3
  kind: IPPool
  metadata:
    creationTimestamp: "2021-01-22T13:27:14Z"
    name: default-ipv4-ippool
    resourceVersion: "851"
    uid: 8e03fb7c-0966-441a-94eb-3277f1e92715
  spec:
    blockSize: 26
    cidr: 192.168.0.0/16
    ipipMode: Always
    natOutgoing: true
	disabled: true
    nodeSelector: all()
    vxlanMode: Never
- apiVersion: projectcalico.org/v3
  kind: IPPool
  metadata:
    creationTimestamp: "2021-02-22T15:17:45Z"
    name: net-pool
    resourceVersion: "9167575"
    uid: 1d88af04-5d5d-4f88-9ff2-3f1b4f7b2e80
  spec:
    blockSize: 26
    cidr: 10.253.0.0/16
    ipipMode: Always
    natOutgoing: true
    nodeSelector: all()
    vxlanMode: Never
kind: IPPoolList
metadata:
  resourceVersion: "9167651"
EOF

$ kubectl get no bksrk8svt1.domain.az -o yaml > file.yaml; sed -i "s/'172.16.0.0/16'/'172.17.0.0/16'/g" file.yaml; kubectl delete no bksrk8svt1.domain.az && kubectl create -f file.yaml
$ kubectl get no bksrk8svt2.domain.az -o yaml > file.yaml; sed -i "s~172.16.1.0/16~172.17.1.0/16~" file.yaml; kubectl delete no bksrk8svt2.domain.az && kubectl create -f file.yaml
$ kubectl get no bksrk8svt3.domain.az -o yaml > file.yaml; sed -i "s~172.16.2.0/16~172.17.2.0/16~" file.yaml; kubectl delete no bksrk8svt3.domain.az && kubectl create -f file.yaml    

$ kubectl -n kube-system edit cm kubeadm-config
podSubnet: 10.254.0.0/16

$ sudo vim /etc/kubernetes/manifests/kube-controller-manager.yaml
    - --cluster-cidr=10.254.0.0/16

$ calicoctl get wep --all-namespaces	
	
$ calicoctl delete pool default-ipv4-ippool
---katello---
curl --insecure --output katello-ca-consumer-latest.noarch.rpm https://satellite.domain.az/pub/katello-ca-consumer-latest.noarch.rpm
yum localinstall katello-ca-consumer-latest.noarch.rpm 
subscription-manager register --org="Central_Bank_of_Azerbaijan_Republic" --activationkey="domain_key"
subscription-manager attach --auto
subscription-manager repos --enable=rhel-7-server-satellite-tools-6.7-rpms
yum -y install katello-host-tools katello-host-tools-tracer katello-agent insights-client
insights-client --register
---other---
xfs_repair -v -L /dev/dm-0 - repair boot initramfs
xfs_repair -v -L /dev/mapper/centos
########## ---remove lvm and configure grub for boot--- ##########
$ su -
$ vi /etc/fstab
 /dev/mapper/fedora-swap swap                    swap    defaults        0 0
$ swapoff -a
$ lvremove /dev/mapper/fedora-swap
$ vim /etc/default/grub
GRUB_CMDLINE_LINUX="rd.lvm.lv=fedora/swap vconsole.font=latarcyrheb-sun16 rd.lvm.lv=fedora/root $([ -x /usr/sbin/rhcrashkernel-param ] && /usr/sbin/rhcrashkernel-param || :) rhgb quiet"
$ grub2-mkconfig -o /boot/grub2/grub.cfg
$ grub2-mkconfig -o /boot/efi/EFI/fedora/grub.cfg
#####################################################################################
$ systemd-cgtop - The systemd-cgtop command can be used to see the resource usage
$ 
$ dmesg -T --level=err - check dmesg logs
$ ssh-keygen -m PEM -t rsa -b 4096 -q -f /etc/
/heketi_key -N '' - create heketi key for rhel8
$ find . -name '.htaccess' -exec sh -c 'echo "Require user admin" >> {}' \; - find file and add line to it
$ openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out certificate.pem - generate certificate
$ openssl pkcs12 -export -out bankmarket_2022.pfx -inkey bankmarket_2022_key.pem -in bankmarket_2022_cert.pem -certfile bankmarket_2022_fullchain.pem
$ find / -xdev -type f -size +100M - find big size files
$ firewall-cmd --add-rich-rule='rule protocol value="vrrp" accept' --permanent - add keeapalived protocol to firewalld
$ heketi-cli cluster list - show heketi cluster list
$ heketi-cli node list - show heketi nodes list
$ heketi-cli cluster info <clusterid> - show info about cluster with id <clusterid>
$ heketi-cli device info <deviceid> - show info about device in cluster with id <deviceid>
$ heketi-cli node info <nodeid> - show info about node in cluster with id <nodeid>
$ heketi-cli volume info <volumeid> - show info about volume in cluster with id <volumeid>
$ heketi-cli volume create -size=100 - create volume with 100GB size
$ heketi-cli volume expand -volume=<volumeid> -expand-size=1024 - expand size of volume
$ heketi-cli volume delete <volumeid>
$ heketi-cli device info de5d167ea132f6b842467d2e3bdfb5df
$ heketi-cli device resync de5d167ea132f6b842467d2e3bdfb5df - extend device size
$ gluster volume list - list gluster volumes 
$ gluster volume info vol_8176b58fab2359a325ba3388c30fc3f8 - check brick location
$ systemctl enable firewalld - Enable firewall
$ firewall-cmd --query-panic
$ firewall-cmd --panic-on
$ firewall-cmd --panic-off
$ firewall-cmd --permanent --zone=public --add-rich-rule='
  rule family="ipv4"
  source address="1.2.3.4/32"
  port protocol="tcp" port="4567" accept'
$ find . -type f -exec sed -i 's/node1/bksrk8svt1/g' {} +
$ firewall-cmd --reload
$ systemctl start firewalld - Start firewall
$ sudo mount -o remount,exec /tmp - set tmp as executable
$ yum install setroubleshoot setools
$ sealert -a /var/log/audit/audit.log
$ yum install cifs-utils
$ mount -t cifs -o vers=1.0,username=user_name //server_name/share_name /mnt/
$ firewall-cmd --get-zone-of-interface eth0 - Get zone of interface
$ firewall-cmd --zone=public --list-interfaces - Get interfaces of zone
$ firewall-cmd --zone=internal --change-interface=eth0 - Chante zone for interface
$ systemctl status firewalld - Check status firewall
$ systemctl enable ngt_guest_agent
$ /usr/sbin/haproxy -c -V -f /etc/haproxy/haproxy.cfg - check haproxy configuration
$ logrotate --force  /etc/logrotate.d/syslog - logrotate check config
$ systemctl restart ngt_guest_agent
$ firewall-cmd --list-all - List all configuration
$ firelwall-cmd --get-zones - Get firewall zones
$ firewall-cmd --get-services - Get firewall services
$ firewall-cmd --get-default-zone - Get firewall default zone
$ firewall-cmd --set-default-zone - Set firewall default zone
$ firewall-cmd --add-port=3306/tcp - Add tcp port to firewall
$ firewall-cmd --add-port={3306/tcp,5000/tcp,6060/tcp} - Add several tcp ports to firewall
$ firewall-cmd --add-port=5000-5010/tcp - Open ports interval
$ firewall-cmd --remove-port=3306/tcp - Remove port from firewall
$ firewall-cmd --permanent --add-port=2200/tcp Add tcp port permanently
$ firewall-cmd --permanent --remove-port=2200/tcp Remove tcp port permanently
$ firewall-cmd --add-service=mysql - Add service to firewall
$ firewall-cmd --add-service={mysql,http,ntp} - Add several services to firewall
$ firewall-cmd --add-service=mysql --permanently - Add service to firewall permanently,for saving rule after reload firewall
$ firewall-cmd --reload - Firewall reload
$ firewall-cmd --add-forward-port=port=8080:proto=tcp:toport=80 - Port forward all incoming 8080 to 80
$ firewall-cmd --add-forward-port=port=8080:proto=tcp:toport=80:toaddr=192.168.100.221 - Port forward to specific ip
$ firewall-cmd --remove-forward-port=port=8080:proto=tcp:toport=80 - Port forwarding remove-port
$ firewall-cmd --permanent --zone=public --add-rich-rule='rule family=ipv4 source address=192.168.128.220/32 accept' - Allow all trafic from ip address
$ firewall-cmd --permanent --zone=public --add-rich-rule='rule family=ipv4 source address=192.168.128.220/32 reject' - Drop all trafic from ip address
$ firewall-cmd --permanent --zone=public --add-source=192.168.100.0/24 - Allow subnet access
$ firewall-cmd --permanent --zone=public --add-rich-rule='rule family=ipv4 source address=10.0.0.100/32 reject' - rich rule for rejecting incoming requests from specific ip address
$ firewall-cmd --permanent --zone=public --add-forward-port=port=8888 proto=tcp:toport=80:toaddr=10.0.0.10 - forward incoming requests to port 8888 to port 80 on address 10.0.0.10
$ lvcreate -n testvl -L10G testvg - create new logical voloume "testvl" with size 10G in the "testvg" volume groupe
$ lvextend -L +110M /dev/vg2/lv2 - add capacity to logical volume
$ lvreduce -L -100M /dev/vg2/lv1 - remove capasity from logical volume
$ yum install setroubleshoot setools
$ journalctl -t setroubleshoot
$ sealert -l "*"
$ sealert -a /var/log/audit/audit.log
$ resize2fs /dev/vg2/lv2 - resize logical volume
$ semanage port -l - show ports restricted by selinux
$ brctl show - show the virtual interface bridges
$ virsh list --all - show all virtual machines
$ nmcli dev show - show network devices status
$ xfs_growfs - change logical volume size after extending
$ vgcreate testvg /dev/sdb - create new logical volume with name "testvg" on physical device /dev/sdb
$service sssd stop ; rm -rf /var/log/sssd/ ; rm -rf /var/lib/sss/db/ ; rm -rf /var/lib/sss/mc/* ; service sssd start
$ pvcreate /dev/sbd - create new phisical volume on device /dev/sdb
$ groups - show groups of user
$ newgrp sales - set sales as the primary group
$ ss -lt - show listening ports as netstat
$ hostnamectl set-hostname myhost - set hostname
$ setfacl -Rm u:magi:rwx /etc/apache2/sites-available/ - setfacl for user to directory
$ systemctl status crond -l - list current status of crond
$ journalctl -p err - show journalled error
$ journalctl --since yesterday -p err - show journalled error logs from yesterday
$ for file in /proc/*/status ; do awk '/VmSwap|Name/{printf $2 " " $3}END{ print ""}' $file; done | sort -k 2 -n -r | less - check swap usage by process
$ hwclock --systohc - synchronizes current system time to hardware clock
$ hwclock --hctosys - synchronize current hardware time to the system clock
$ ln -sf /usr/share/zoneinfo/America/Los_Angeles /etc/localtime - set the local time as America/Los_Angeles
$ tzselect - tool for set time zone
$ crontab -e -u natasha - set crontab for specific user
$ /etc/locale.conf - set system language config file
$ bashrc - start every time when user start session
$ chattr +i /etc/resolv.conf - prevent change /etc/resolv.conf
$ chattr +i /etc/resolv.conf - permit change /etc/resolv.conf
$ bash_profile - start when new login created
$ openvt -c 4 cmd - open new virtual terminal with number 4
$ ssh-keygen -l -f /etc/ssh/ssh_host_ecdsa-key.pub - check fingerprint of ssh-key
$ ssh-keygen -R hostname - revoke host from known hosts
$ sosreport - create report files for redhat support
$ cat /dev/sda > /tmp/device.iso - create iso backup of device
$ getent passwd ldapuser1 - check ldap password for user ldapuser1
$ chown --reference /dir1 /dir2 - copy permission facilities of dir1 to dir2
$ getfacl - check permission facilities of file or directory
$ mail -s "$1 has just logged in" root < ." - send mail from script to spesified user
$ context -Z - check selinux permissions
$ restorecon -FRvv - restore context for file
$ semanage fcontext - search context for specific
$ semanage fcontext -l - show list contexts selinux
$ iptraf - network traffic analizyng tool
$ journalctl --vacuum-time=2d - clear last 2 days journalled info
$ yum history- show installed packages byy date
$ yum history undo 7 - roleback(delete) packages installed on history with number 7
$ yum gorups list hidden - show all groups of packages
$ reposync - get packages updates from rhel
$ yum group info "Groupname" - show packages in group
$ rpm -qc httpd - show httpd package configuration files
$ systemctl snapshot snapshotname - create snapshoot
$ find . -type f -exec sed -i 's/node1/bksrk8svt1/g' {} + - find and change string
$ nmcli connection add type bond ifname bond0 con-name bond0 mode active-backup miimon 100 ip4 192.168.1.10/24 gw4 192.168.1.1
$ nmcli connection add type bond-slave ifname eno1 con-name eno1-slave master bond0
$ nmcli connection add type bond-slave ifname eno2 con-name eno2-slave master bond0
$ nmcli connection up bond00
$ systemctl snapshot - list snapshots
$ systemctl isolate snapshoot - get back snapshoot
$ lvcreate -L 1G -s -n lvdb-snap /dev/centos/lvdata - create snapshoot of logical volume lvdata with new name lvdb-snap
$ .....tty0 systemd.unit=rescue - activate rescue mode
$ journalctl -p string - find in journalctl by string
$ tzselect - select timezone
$ chronyc sources -v - check ntp syncronization
$ vgchange -a n - deactivate logical volumes in volume group
$ lvdisplay --maps - show logical volumes device
$ vgdisplay --maps - show volume groups devices
$ lvresize -r -L +100M /dev/vg/lv - resize logical volum with resizing filesistem
$ rsync -rvz -e ssh  --size-only --include='Logon.*' --include='Logoff.*' --include='*.-' --exclude="*" /cma/rtsx/pie/log/ rts@192.168.36.2:/home/rts/azips - rsync by size only
$ lvcreate --size 100M --snapshot --name snap /dev/vg00/lvol1 - create backup of logical volume /dev/vg00/lvol1 with backup name snap
$ sudo dd if=/dev/sda of=/dev/sdb1 bs=64K conv=noerror,sync status=progress - image backup of disk /dev/sda to disk /dev/sdb
$ sudo dd if=/dev/sda conv=sync,noerror bs=64K | gzip -c  > /PATH/TO/DRIVE/backup_image.img.gz - create image backup of disk /dev/sda to img format in external disc
$ gunzip -c /PATH/TO/DRIVE/backup_image.img.gz | dd of=/dev/sda - restore backup from external device
$  mount -t cifs -o username=vnc //192.168.148.2/soft /mnt - mount samba sharing
$ /opt/nfs 10.1.1.18(no_root_squash,rw,sync) - nfs export
----- Team Connection Create and configure(Teaming) ---
$nmcli con add type team con-name team0 config '{ "runner": {"team0":"activebackup"}}' - create team connection with mode activebackup with name team0
$nmcli con show - show connections
$nmcli con mod team0 ipv4.addresses 192.168.148.2/24 ipv4.gateway 192.168.148.1 - team add network
$nmcli con add type team-slave ifname eno16777736 master team0 - add interface to team
$nmcli con add type team-slave ifname eno33554960 master team0 - add interface to team
$nmcli con up team0 - get up team connection
$ pcs resource show - pacemaker show configured resources
$ pcs rsource show --full - pacemaker show all cluster rosorces with parameters
$ pcs resource move rtgs_service rtgsapp02.rtgs.local - relocate pacemaker resource to another node
$ pcs resource unmanage resource1 - unmanage resource group
$ pcs resource manage resource1 -  manage resource group
$ pcs resource cleanup - clean errors
$ ssh -k -l "administrator@rtpswin.local" rtpsipap02.rtps.local -p 53810 - login as other domain user
$ pcs resource relocate 
$ pcs cluster standby
$ authonfig --passalgo sha256 - change user authentication password algoritm. may be used sha-512,md5
$ pcs cluster unstandby
$ pcs cluster start --all
$ pcs stonith refresh - refresh stonith
$ pcs cluster status - show peacemaker cluster nodes status
$ pcs resource disable rtsx - disable cluster resource
$ pcs resource disable rtsx - enable cluster resource
$ pcs cluster stop
$ pcs resource group list - lists all currently configured resource groups
$ pcs resource show rtsx - displays all parameters of cluster resource rtsx
$ pcs resource failcount show - displays fail count of a cluster resource
$ pcs resource update rtsx op stop interval=0s timeout=800s - resource timeout config
$ pcs resource failcount reset {resource_name} {cluster_node_name} - clear or reset the failcount of a cluster resource
$ pcs resource create ha_lvm LVM volumegroup=cluster_vg exclusive=true --group halvm_fs - On any of cluster node , create LVM resource
$ pcs resource create xfs_fs Filesystem device="/dev/{volume-grp}/{logical_volume}"directory="/mnt" fstype="xfs" --group halvm_fs - Now create FileSystem resource from any of the cluster node
$ lvchange -an /dev/vg_name/lv_name - deactivate logical volume
$ vgchange -an vg_name - deactivate volume group
$ lvchange -ay /dev/vg_name/lv_name - activate logical volume
$ vgchange -ay vg_name - activate volume group
$ ls -Zd /web - show selinux configuration on directory
$ vgdisplay - show logical volume groups
$ lvdisplay - show logical volumes
configuration file - /etc/firewalld/zones/public.xml
$ nohup command >/dev/null 2>&1 & - runs in background, still doesn't create nohup.out
$ nohup command >/dev/null 2>&1   - doesn't create nohup.out
$ /etc/login.defs - config file contains login properties
$ /etc/defaults/useradd - configuration file for default settings user creation
$ ip route - show routing table on RHEL 7
$ ip address show - show network configuration on RHEL 7
$ ip route add 192.0.2.0/24 via 10.0.0.1 [dev ifname] - route add on RHEL 7
$ parted /dev/sdg print free - show unallocated disk space
$ df -HT - show free disk space on mounted disks
$ udevadm trigger - if you delete all in /dev filesystem, you can recover all with this command
$ find / -user linda - find files in root directory owned by user linda
$ find / -group users - find files in root directory owned by group users
$ postconf - used to configure parameters of postfix
$ postconf -e - change parameters of postfix
$ postqueue -p - show postfix messages in queue
$ postqueue -f - flush the postfix queue
$ systemd-cgtop - real-time system resources using 
$ find /cma/ -name "*.log" -print0 | xargs -0 rm - delete big size logs(Argument list too long)
$ pvdisplay - show physical volumes
$ cat /proc/sys/kernel/{ostype,osrelease,version} - show version
$ cat /etc/*release - show release version
$ :%s/dc=my-domain/dc=example/gi - change string in file
$ cat /proc/<tomcat pid>/limits - check process limit
$ export DISPLAY=192.168.100.39:1.0 - export the DISPLAY to local browser(Xbrowser)
$ cfdisk /dev/sda - show free space on disk
$ pdbedit -L - list local samba users
$ rpm -ivh --nodeps package_name.rpm - install without dependencies
$ runuser -l  userNameHere -c 'command' - run command as another user
$ rpm --nodeps -e package_name.rpm - remove(deinstall) package without dependencies
$ clusvcadm -R haproxygr - LB(haproxy) cluster restart
$ clusvcadm -d haproxygr - LB(haproxy) cluster disable
$ clusvcadm -e haproxygr - LB(haproxy) cluster enable
$ clusvcadm -r haproxygr - LB(haproxy) cluster move to another nodeps
$ lsblk - list block devices
$ blkid - show device attributes (device ID)
$ netstat -nltp - netstat
$ chmod u+s /usr/sbin/clustat - privlege for execute
$ scp your_username@remotehost.edu:foobar.txt /some/local/directory - Copy the file "foobar.txt" from a remote host to the local host
$ scp foobar.txt your_username@remotehost.edu:/some/remote/directory - Copy the file "foobar.txt" from the local host to a remote host
$ scp -r foo your_username@remotehost.edu:/some/remote/directory/bar - Copy the directory "foo" from the local host to a remote host's directory "bar"
$ scp your_username@rh1.edu:/some/remote/directory/foobar.txt \ - Copy the file "foobar.txt" from remote host "rh1.edu" to remote host "rh2.edu"
$ scp foo.txt bar.txt your_username@remotehost.edu:~ - Copying the files "foo.txt" and "bar.txt" from the local host to your home directory on the remote host
$ scp -P 2264 foobar.txt your_username@remotehost.edu:/some/remote/directory - Copy the file "foobar.txt" from the local host to a remote host using port 2264
$ scp your_username@remotehost.edu:/some/remote/directory/\{a,b,c\} . - Copy multiple files from the remote host to your current directory on the local host
$ scp your_username@remotehost.edu:~/\{foo.txt,bar.txt\} . - Copy multiple files from the remote host to your current directory on the local host
$ cat /var/log/secure | grep 'sshd.*Invalid' - show failed logons
$ no_root_squash - the option in /etc/exports,this means that, when client mapped exported directory as root user mapped as nobody user and he can't have root permissions as the local root user
$ all_squash -  the option in /etc/exports,this means that, when client mapped exported directory as all users mapped as nobody user
$ exportfs -r - reload nfs server without restarting it
$ cat /var/log/secure | grep 'sshd.*opened' - show successfull logons
$ tcpdump -i any -n tcp port 10050 - block the tcp connections
$ date --set HH:MM:SS - time set
$ date --set HH:MM:SS --utc - time set for UTC
$ date --set YYYY-MM-DD - date set
$ fg - move running shell job from background to foreground
$ bg - move running shell job from foreground to background
$ jobs - show which jobs are currently running from this shell
$ arch - show operation sistem achitecture x64 or x86
$ virsh console wm1 - connect to virtual machine with name wm1
$ vgreduce --removemissing --force vg_srvlinux - remove missing physical volume group
$ scp -P 3308 /home/samba/.ssh/id_rsa.pub samba@192.168.100.70:/home/samba/.ssh/authorized_keys - ssh autorized from aix to linux
$ usermod -a -G mygruop myuser - add user to groupe
$ usermod -a -G mygruop myuser - remove user from group
$ wall "some text" - send text message to other users
$ parted /dev/sda - start partet for remove partition in device
$ print - View the current partition table to determine the minor number of the partition to remove
$ rm 3 - remove partition
$ lsblk
$ sudo -u logstash /usr/share/logstash/bin/logstash --path.settings /etc/logstash -t
$ swapoff -a - unmount swap
$ swapoff /dev/sda4 - unmount swap space
$ swapon -a - mount swap space
$ mkswap /dev/sda - make device as swap
$ swapoff -v /dev/vgroot/lvroot
$ swapoff -v /dev/vgroot/lvswap
$ lvresize /dev/vgroot/lvswap -L 16G
$ mkswap /dev/vgroot/lvswap
$ swapon -va

$ fdisk -l - shows device
$ echo "- - -" > /sys/class/scsi_host/host$/scan - scan and identifiy new added disck
$ swapon -s - show swap space
$ useradd -u 1234 alex - add user and set id
$ authconfig-tui - configure authentication without starting gui
$ useradd -G {group-name} username - add new user in group
$ usermod -m -d /path/to/new/home/dir userNameHere - change existing user home directory
$ smbpasswd -a smammadov - create smb password for user
$ testparm -s - show samba shared folders
pam_tally2 --user=agurbanli --reset - command for reset user failed attempts to system
$ chown -R user:group /foldername - change owner of folder (file)
$ vgremove officevg - delete the vg with name officevg
$ mkfs.ext4 /dev/my_vg/my_lv - create ext4 filesystem on logical volume with name my_lv
$ mount /dev/VolGroup00/lv_1 /mnt - mount logical volume lv_1 to /mnt directory
$ ifconfig tr0 detach - remove the interace with name tr0 from interfaces list
$ ifconfig en0 mtu  12000 - change maximum transmission unit (MTU) of en0 to 12000 bytes
$ blkid - shows device id for mount
$ ps -fu rts | grep -i ./rtsx - show status process of ./rtsx running by user rts
$ grep -rnw '/cma/rtsx/' -e "151211NABZAZ2CARTS0001005533" - find string in files
$ man -k time | grep real - show manual of time command amd information with 'real' string
$ ls [hm]ost* - display all files with start h or m and ends with ost string
$ ls *[0-9]* - display all files include numbers in name
$ss -a - show connected sockets(ports) to services
$ systemctl get-default - check default systemd target(graphical.target,multi-user.tartget,rescue.target,emergency.target)
$ ls -d *[0-9]* - display all files include numbers in name
$ ls [!hm]ost - display all files started not with h or m and ends with ost
$ ps aux | awk '{print $2}' - display second column of displayed information
$ ps aux | awk '{print $2}' | sort -n - display second column of displayed information and sort by number
$ find / -name "*.rpm" 2> /dev/null - find all rpm files in /root directory and send all errors to /dev/null device
$ locate test.txt - to locate where the test.txt file. if is not displayed the location of test.txt file, you must first run command updatedb for updating information
$ echo -n 'secret' | base64
$ echo -n 'secret-hashed' | base64 --decode
$ tar cvf /root/etc.tar /etc - create tar file of /etc filesystem in root directory
$  ip -s lin show ens192 - show interface packets transfer counter
$ tar czf /root/etc.gz2 /etc - create compressed tar file of /etc filesystem in root directory
$ tar xvf /root/etc.tar -C /root/etc - extract the etc.tar to etc directory
$ tar -cf archivename.tar /home - arhcive files in home directory to archivename.tar file
$ tar -cf archivename.tar /home - arhcive files in home directory to archivename.tar file with information
$ tar -rvf archivename.tar /tmp - add files in /tmp directory to the current archivename.tar file
$ tar -tvf archivename.tar - show files archived in tar file
$ echo "redhat" | passwd --stdin gabriel - change password for user gabriel and set password redhat for it
$ rsync -rvz -e ssh  --remove-source-files /M_SWIFT/ all_adm@192.168.36.2:/home/all_adm/swift
---openssl---
$ openssl pkcs12 -in <filename.pfx> -nocerts -nodes | sed -ne '/-BEGIN PRIVATE KEY-/,/-END PRIVATE KEY-/p' > rtsx.domain.az.key.pem - export private key from pfx file
$ openssl pkcs12 -in <filename.pfx> -clcerts -nokeys | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > rtsx.domain.az.pem - export certificate from pfx file
$ openssl pkcs12 -in <filename.pfx> -cacerts -nokeys -chain | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > ca.pem - export ca from pfx file
$ openssl x509 -outform der -in your-cert.pem -out your-cert.crt - convert pem to crt
$ openssl pkcs12 -in rtsx.domain.az-live.pfx -out privatekey.pem -nodes - convert pfx to pem
---freeipa---
$  ipa pwpolicy-show --user=username - show users password policy

profile settings for user bash_login bash_logut bashrc
Following pseudo code explains the sequence of execution of these files.
execute /etc/profile
IF ~/.bash_profile exists THEN
    execute ~/.bash_profile
ELSE
    IF ~/.bash_login exist THEN
        execute ~/.bash_login
    ELSE
        IF ~/.profile exist THEN
            execute ~/.profile
        END IF
    END IF
END IF
When you logout of the interactive shell, following is the sequence of execution:
IF ~/.bash_logout exists THEN
    execute ~/.bash_logout
END IF
Please note that /etc/bashrc is executed by ~/.bashrc as shown below:
$ cat ~/.bashrc
if [ -f /etc/bashrc ]; then
. /etc/bashrc
fi

---FreeIpa resolve problem with mkhomedir ---
$ echo session     optional      pam_exec.so /usr/local/bin/restoreconhome.sh  >> /etc/pam.d/password-auth 

$ vim  /usr/local/bin/restoreconhome.sh

$!/bin/bash

DIRECTORY=$HOME

if [[ ! -e $DIRECTORY ]];
then
   mkdir -p $DIRECTORY
   /sbin/restorecon -R /home
elif [[ ! -d $dir ]];
then
    echo "Home directory exist" 1>&2
fi                                                     

$ chmod +x  /usr/local/bin/restoreconhome.sh

$ ipa-client-install -d --mkhomedir --domain=rtgs.local --server=rtgsipap01.rtgs.local --realm=RTGS.LOCAL --principal=admin --password=P@ssw0rd  --enable-dns-updates -U - ipa client install
$ ipa-getcert request -r -f /etc/pki/tls/certs/rtpsstgp01.rtps.local.crt -k /etc/pki/tls/private/rtpsstgp01.rtps.local.key -N CN=rtpsstgp01.rtps.local -D rtpsstgp01.rtps.local -K HTTP/rtpsstgp01.rtps.local
$ ipa-client-install 
$ ipa config-mod --defaultshell=/bin/bash - set default shell for all new ipa users
$ ipa user-mod <user> --shell=/bin/bash - set shell for current ipa user.
Add IPA Client
$ ipa dnsrecord-add fond.local control --a-rec 172.23.2.203 - add dns record to ipa server
$ ipa-client-install --server=dlp.ipa.srv.world --domain ipa.srv.world
$ ipa-client-install --mkhomedir
$ ipa dnsrecord-add fond.local hesabat --a-rec 172.25.2.12
$ ipa dnsrecord-add 2.25.172.in-addr.arpa 12 --ptr-rec hesabat.fond.local
$ firewall-cmd --add-service={freeipa-ldap,freeipa-ldaps,dns,ntp} --permanent
$ firewall-cmd --reload

$ pwgen -s 14 -1 -y - generate password
$ authconfig --enablemkhomedir --update - fix problem mkhomedir ipa
$ sudo cp /etc/skel/.bashrc ~ fix bashrc problem on home directory
$ echo 		ALL            ALL = (ALL) NOPASSWD: ALL >> /etc/sudoers - set sudo without password for all
$ ldapsearch -x uid=admin
---suid,sgid,sticky bit---
SUID (NUMERIC VALUE = 4) (RELEATIVE VALUE = u+s) - only effective on files none on directories. Other users have permission to executes file with permissions of file owner.
$ chmod u+s somefile
SGID (NUMERIC VALUE = 2) (RELEATIVE VALUE = g+s) - effective on files and directories. When set to the file, other users executes files with permissons of group owner. When set to the directory  its means that all of the items created in directory automatically get the group owner
$ chmod g+s somefile
$ chmod g+s /somedirectory
Sticky bit (NUMERIC VALUE = 1) (RELEATIVE VALUE = +t) - effective only on directories. Only owner of the file created in directory can delete it
$ chmod +t somefile
---docker---
$ docker rmi $(docker images -q) -f
$ docker system prune -a - remove all 
$ docker tag a38859d41e19 anargurbanli/php-fpm-7.0.33 - tag image as docker image for pushing
$ docker push anargurbanli/php-fpm-7.0.33 - push docker image to docker hub
---kubernetes---
$ kubectl get nodes -o wide - show node list full
$ kubectl get pods - show pods
$ kubectl exec -it ilkpod -c nginx-- /bin/bash - connect to nginx container inside pod
$ kubectl port-forward POD_NAME HOST_PORT:POD_PORT - forward node port to pod port
/var/lib/kubelet/pods/PODUID/volumes/kubernetes.io~empty-dir/VOLUMENAME - emptydir volume mount directory in node
cd /var/lib/kubelet/pods/b0923a3f-29e8-4ac5-aa5f-94318c0a859b
$ kubectl logs pod1 - get logs of pod1
$ kubectl get pods -n <namespace> <pod-name> -o jsonpath='{.metadata.uid}' - get uid of specific pod
$ kubectl describe endpoints - get k8s enpoints
$ kubectl exec -i -t my-pod --container main-app -- /bin/bash
$ kubectl get pods --all-namespaces -o jsonpath="{..image}" |tr -s '[[:space:]]' '\n' |sort |uniq -c | less - show all images in all pods
$ kubectl get pods --all-namespaces - show all namespaces
$ kubectl get pods -o json | jq '.items[].spec.containers[].env[]?.valueFrom.secretKeyRef.name' | grep -v null | sort | uniq - show secrets
$ kubectl get pods -o=custom-columns=NAME:.metadata.name,CONTAINERS:.spec.containers[*].name - show all container in pods
$ kubectl exec -ti pod-name -c container-name bash
$ kubectl run redis --image=redis123 --dry-run -o yaml > pod.yml - no create resource create only yaml
$ kubectl run redis --image=redis123 --dry-run=client -o yaml > pod.yml - check command
$ kubect lconfig set-context $(kubectl config current-context) --namespace=dev - set dev namespace as default
se pod redis --port=6379 --name redis-service --dry-run=client -o yaml
$ kubectl get ns - check namespaces
$ kubectl -n dev get svc - show services in namespace with name dev
$ kubectl set image deployment nginx --image=nginx:1.18 - set image for deployment
$ kubectl create deployment --image=nginx nginx - create deployment with name nginx
$ kubectl edit deployment nginx - edit deployment with name nginx
$ kubectl scale deployment nginx --replicas=5 - scale number of replicas up to 5 for deployment nginx
$ kubectl taint nodes node-name key=value:taint-effect - effect may be 3 types NoSchedule,PreferNoSchedule,NoExecute
$ kubectl taint nodes node1 app=blue:NoSchedule -
$ kubectl label nodes node-name key=value
$ kubectl label nodes node1 size=Large
$ kubectl describe node kubemaster | grep Taint
$ kubectl explain pod --recursive | less
$ kubectl top node - show node memory and cpu using info
$ kubectl rollout status deployment/myapp-deployment - check status of deployment
$ kubectl rollout history deployment/myapp-deployment - check history of deployment operations
$ kubectl rollout undo deployment/myapp-deployment - rollback deployment
$ kubectl get pod webapp-color -o yaml > webapp-color.yaml - copy pod configuration to file
$ kubectl create configmap web-color --from-literal=APP_COLOR=darkblue
$ kubectl create secret generic my-secret --from-literal=DB_Password=password
$ kubectl drain node1 - except node1 from cluster and pods on node1 migrated to another nodes
$ kubectl cordon node1 - pods on node1 not migrated to another nodes, but new pods not scheduled on node1
$ kubectl uncordon node1 - connect node1 to cluster again
$ kubeadm upgrade apply v12.2.0 - upgrade kubeadm
$ kubectl version --short - show kube version
$ kubectl get all --all-namespaces -o yaml > all-deploy-services.yaml
$ kubectl api-resources - get resource information
$ kubectl create secret docker-registry private-reg-cred --docker-username=dock_user --docker-password=dock_password --docker-server=myprivateregistry.com:5000 --docker-email=dock_user@myprivateregistry.com
$ kubectl scale --replicas=0 deployment <deploymentname> - terminate pod
$ get pod -n edomain | grep Evicted | awk '{print $1}' | xargs kubectl delete pod -n edomain - delete evicted pods 
$ ip netns add red - add new network namespace with name red
$ ip netns add blue - add new network namespace with name blue
$ ip netns - show network namespaces
$ ip netns exec red ip link - run ip link command inside network namespace with name red
$ ip netns exec red route - show route table inside red namespace
$ ip link add veth-red type veth peer name veth-blue - create new veth virtual cable 
$ ip link set veth-red netns red - implement veth-red virtual cable to namespace red
$ ip link set veth-blue netns blue - implement veth-blue virtual cable to namespace blue
$ ip -n red addr add 192.168.15.1 dev veth-red - add ip address for virtual cable veth-red
$ ip -n red addr add 192.168.15.2 dev veth-blue - add ip address for virtual cable veth-blue
---renew kubernetes certificates---

Master
kubeadm token create
export NODE=smsrdisworkvp08.domain.az
kubectl drain $NODE --delete-local-data --force smsrdisworkvp01.domain.az --ignore-daemonsets

Worker
systemctl stop kubelet
systemctl stop docker
mkdir /var/lib/kubelet/pki/ARCHIVE
mv /var/lib/kubelet/pki/* /var/lib/kubelet/pki/ARCHIVE
mkdir /etc/kubernetes/ARCHIVE
cp -R /etc/kubernetes/bootstrap-kubelet.conf /etc/kubernetes/ARCHIVE
new_token=ЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧЧ
sed -i "s/token: .*/token: $new_token/" /etc/kubernetes/bootstrap-kubelet.conf
systemctl start docker
systemctl start kubelet

Master
kubectl uncordon smsrdisworkvp01.domain.az
 export NODE=smsrdisworkvp01.domain.az
echo -n | openssl s_client -connect $NODE:10250 2>&1 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | openssl x509 -text -noout | grep Not
---backup-etcd---
$ETCDCTL_API=3 etcdctl --cert=/etc/kubernetes/pki/etcd/server.crt --cacert=/etc/kubernetes/pki/etcd/ca.crt --key=/etc/kubernetes/pki/etcd/server.key snapshot save /opt/snapshot-pre-boot.db
$ 
---restore-etcd---
1.run command
$ETCDCTL_API=3 etcdctl snapshot restore --name="controlplane" --data-dir="/var/lib/restore" --initial-advertise-peer-urls="https://127.0.0.1:2380" --initial-cluster="controlplane=https://127.0.0.1:2380" --initial-cluster-token="etcd-cluster-1" --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key ----restore-etcd---
2.edit /etc/kubernetes/manifests/etcd.yaml 
- --data-dir=/var/lib/restore
- --initial-cluster-token="etcd-cluster-1"
/var/lib/etcd -> /var/lib/restore

---gitlab-runner---
1. install gitlab-runner on server
2. run gitlab-runner register
3. check runner on gitlab web
4. create new project and add file .gitlab-ci.yml
.gitlab-ci.yml 
stages:
- test
test_runner:
  stage: test
  script:
    - echo hi
5. run runner
$ gitlab-runner --debug verify - verify runners
$ kubeadm alpha certs check-expiration | grep apiserver-etcd-client | awk '{print $7 }' | cut -b 1,2,3 - check kubernetes certificates expiring
---upgrade kubernetes services---
$ kubeadm upgrade plan
$ kubectl drain node01
$ apt install kubeadm=1.18.0-00
$ kubeadm upgrade apply v1.18.0
$ apt install kubelet=1.18.0-00
$ apt-get upgrade -y kubeadm=1.12.0-00
$ apt-get upgrade -y kubetlet=1.12.0-00
$ kubeadm upgrade node config --kubelet-version v1.12.0
$ systemctl restart kubelet
$ kubectl uncordon node01 
---etcd backup restore---
1. check etcd backup command options
$ etcdctl snapshot save -h
2. check etcd member list
ETCDCTL_API=3 etcdctl member list --cacert=/etc/kubernetes/pki/etcd/server.crt --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/etcd/server.key --endpoints=127.0.0.1:2379
3. backup of etcd
$ ETCDCTL_API=3 etcdctl snapshot save --cacert=/etc/kubernetes/pki/etcd/server.crt --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/etcd/server.key --endpoints=127.0.0.1:2379 /tmp/snapshot-pre-boot.db
4. check etcd restore command options
$ etcdctl snapshot restore -h
5. restore etcd
$ ETCDCTL_API=3 etcdctl snapshot restore --cacert=/etc/kubernetes/pki/etcd/server.crt --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/etcd/server.key --endpoints=127.0.0.1:2379 --data-dir="/var/lib/etcd-from-backup" --initial-cluster="master=https://127.0.0.1:2380" --name="master" --initial-advertise-peer-urls="https://127.0.0.1:2380" --initial-cluster-token="etcd-cluster-1" /tmp/snapshot-pre-boot.db
6. vim /etc/kubernetes/manifests/etcd.yaml
> --data-dir=/var/lib/etcd-from-backup
> --initial-cluster-token=etcd-cluster-1
> mountPath: /var/lib/etcd-from-backup
> hostPath: /var/lib/etcd-from-backup
7. check etcd was created
$ watch "docker ps | grep etcd"

---nfs---
NFS Server, IP 10.1.1.100
NFS Client, IP 10.1.1.18

NFS Server configuration
$ yum install nfs-utils rpcbind
$ mkdir -p /opt/nfs
$ vim /etc/exports
/opt/nfs 10.1.1.18(no_root_squash,rw,sync)
$ firewall-cmd --zone=public --add-port=2049/tcp --permanent
$ firewall-cmd --reload
$ service rpcbind start; service nfs start
$ service nfs status

NFS Client configuration
$ yum install nfs-utils rpcbind
$ service rpcbind start
$ mkdir -p /mnt/nfs
$ mount 10.1.1.110:/opt/nfs /mnt/nfs/
---ansible---
ansible all -m user -a "name=automation state=present" -u root --ask-pass
ansible all -m shell -a "echo devops | passwd --stdin automation" -u root --ask-pass
ansible all -m shell -a "echo \"automation ALL=(ALL:ALL) NOPASSWD:ALL\" > /etc/sudoers.d/automation\" -u root --ask-pass
ansible all -m authorized_key -a "user=automation key=\"{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}\" state=present" -u automation --ask-pass

$ ansible <client> -m ping - control connection to ansible clients
$ ansible-inventory --list - list all ansible clients configuration
$ ansible-inventory --graph - list all ansible clients in graphic mode
$ ansible <client> -m setup - show client configurations
$ ansible <client> -m shell -a "command-to-run" - run command on client
$ ansible <client> -m copy -a "src=file.txt dest=/directory/to/move/" - copy local file to remote server
$ ansible <client> -m copy -a "src=file.txt dest=/directory/to/move mode=755" - copy local file to remote server with specific permissions
$ ansible <client> -m copy -a "src=file.txt dest=/directory/to/move/" -b - copy local file to remote server with sudo privleges, -b impression means sudo
$ ansible <client> -m file -a "path=/path/to/file/file.txt state=absent" - remove file(or directory) on client machine
$ ansible <client> -m get_url -a "https://www.example.com/file.zip dest=/home/agurbanli" - download zip file to specific directory on client machine
$ ansible <client> -m yum -a "name=telnet state=latest" - yum module for install latest version of software telnet  on client machine.
$ ansible <client> -m yum -a "name=telnet state=installed" - analog of the yum install software on the client machine
$ ansible <client> -m yum -a "name=telnet state=removed" - remove installed software on client machine
$ ansible <client> -m uri -a "url=http://www.example.com/url-to-read" - start on client machine curl to retrieve url
$ ansible <client> -m uri -a "url=http://www.example.com/url-to-read return_content=yes" - return content of web site
$ ansible <client> -m shell -a "command-to-run" -vvv - run command on client machine verbose impression, information
$ ansible-doc --list - list all modules in ansible
$ ansible-playbook -i inventory my.yml \ --extra-vars 'ansible_become_pass=YOUR-PASSWORD-HERE' - run ansible with sudo password
$ ansible rtgsclient -m setup -a filter=*ipv4 - 
$ ansible httpd -i /ansible/inv.ini -b -m yum -a "name=httpd state=latest" -t 100 - add hoc command for installing httpd with becoming to root user

ansible_host= - hostname(ip) of client
ansible_user= - username for connecting to remote client
ansible_ssh_private_key_file= - location of private key file of remote client
ansible_port= - variable ssh port for connection 

---image backup---
---Image Backup of disk---
To create a compressed disk image with "dd" :
Boot into rescue mode with the installation media
Create a mount point for your external drive:
$ mkdir /mnt/external
Mount your external drive:
$ mount /dev/sdb1 /mnt/external
Create the compressed disk image:
$dd if=/dev/sda | gzip -9 > /mnt/external/filename.img.gz 
To recover this in future, run the following command :
$ zcat /mnt/external/filename.img.gz | dd of=/dev/sda
Note: Do not use dd to backup block devices that are currently in use. Doing so will likely cause inconsistency on the filesystem(s).

Create an image of installed system
To create an image of installed system, get USB of exact same size.
Recreate the initrd with USB support
Raw
$ vi /etc/dracut.conf
        add_drivers+="ehci-hcd uhci-hcd xhci-hcd usb-storage scsi-mod sd-mod sd hid-microsoft hid-generic usbhid"     
$ dracut -f -v
Force a file check on boot
Raw
$  touch /forcefsck
Create image using dd command:
Raw
$  dd if=/dev/sda  of=/dev/<usb device> bs=8192
Add any subsequent partitions to the usb drive in 4gb chunks.
Insert usb and boot machine.
---ISCSI---
---create target on server---
$ fdisk /dev/sdb - create logical disk
$ pvcreate /dev/sdb1 - create physical volume from logical disk
$ partprobe
$ vgcreate newvg /dev/sdb1 - create volume group with new disk
$ lvcreate -n newlv -L +1G newvg - create logical volume on volumegroup newvg and allocate size 1GB to it
$ yum install targetcli - install targetcli command tool
$ targetcli
>/backstore/block create disk1 /dev/newvg/newlv - create new block from lv newlv
>/iscsi create iqn.2019-05.local.rtgsadmin- create new targetname
>/iscsi/ iqn.2019-05.local.rtps:rtgsadmin/tpg1/acls create  iqn.2019-05.local.rtps:rtgsclient - create access list for initiator rtgsadmin
> /iscsi/ iqn.2019-05.local.rtps:rtgsadmin/tpg1/luns create /backstore/block/disk1 - create new LUN for the target from block
> /iscsi/ iqn.2019-05.local.rtps:rtgsadmin/tpg1/portals create rtgsclient.rtps.local:3260 - create network portal access for specified host
>saveconfig
>exit
$ firewall-cmd --permanent --add-port=3260/tcp
$ firewall-cmd --reload
---create initiator on client---
$ yum install iscsi-initiator-utils
$ vim /etc/iscsi/initiatorname.iscsi - change initiatorname in config file
InitiatorName=iqn.2019-05.local.rtps:rtgsclient
$ iscsiadm -m discovery -t st -p rtgsadmin.rtps.local - discover the target
$ iscsiadm -m node -T iqn.2019-05.local.rtps:rtgsadmin -l - initiate the server target with loggining
$ iscsiadm -m session -P3 | grep Attached - check status of target initation
---haproxy.cfg---
global
    daemon
    maxconn 256
    user        haproxy
    group       haproxy
    chroot      /var/lib/haproxy
    log 127.0.0.1:514  local0 debug

defaults
    log global
    option httplog
    option dontlognull
    mode http
    option forwardfor except 127.0.0.0/8
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms

listen stats 192.168.232.80:1936
        mode http
        log global

        maxconn 10

        clitimeout 100s
        srvtimeout 100s
        contimeout 100s
        timeout queue 100s

        stats enable
        stats hide-version
        stats refresh 30s
        stats show-node
        stats auth admin:password
        stats uri  /haproxy?stats

frontend http
    bind *:80
    bind *:443 ssl crt /etc/haproxy/ssl/domain_04202021.cer ca-file /etc/haproxy/ssl/domain_ca-chain_04202021.cer
    http-request set-header X-SSL                       %[ssl_fc]
    http-request set-header X-SSL-Client-Verify         %[ssl_c_verify]
    http-request set-header X-SSL-Client-SHA1           %{+Q}[ssl_c_sha1]
    http-request set-header X-SSL-Client-DN             %{+Q}[ssl_c_s_dn]
    http-request set-header X-SSL-Client-CN             %{+Q}[ssl_c_s_dn(cn)]
    http-request set-header X-SSL-Issuer                %{+Q}[ssl_c_i_dn]
    http-request set-header X-SSL-Client-Not-Before     %{+Q}[ssl_c_notbefore]
    http-request set-header X-SSL-Client-Not-After      %{+Q}[ssl_c_notafter]
    http-request redirect scheme https code 301 if !{ ssl_fc }
    default_backend loadbalancer

# acl frontend 
    acl uri_esds path -i -m beg /ESDS
    use_backend loadbalancer if uri_esds

backend loadbalancer
    balance roundrobin
    cookie SERVERID insert indirect nocache
    $server esds1.domain.az 192.168.232.96:443 check cookie s1 ssl ca-file /etc/haproxy/ssl/esds.domain.az.chain.pem
    $server esds2.domain.az 192.168.232.66:443 check cookie s2 ssl ca-file /etc/haproxy/ssl/esds.domain.az.chain.pem
    server esds1.domain.az 192.168.232.96:443 check cookie s1 ssl ca-file /etc/haproxy/ssl/domain_ca-chain_04202021.cer
    server esds2.domain.az 192.168.232.66:443 check cookie s2 ssl ca-file /etc/haproxy/ssl/domain_ca-chain_04202021.cer
###acl backend #



### gitlab script sh###
cd /home/forgit/
echo "I am here"
git clone git@bitbucket.org:gts_dev/admin.e-domain.az.git
sleep 5
cp -Rv admin.e-domain.az/* Edomain/admin.e-domain.az/.
cd Edomain/admin.e-domain.az/
echo "I am in dir"
git add .
git commit -a -m "autoupdate `date +%F-%T`"
sleep 3
git push -u origin HEAD:test
cd ..//..
rm -Rf admin.e-domain.az/
####
